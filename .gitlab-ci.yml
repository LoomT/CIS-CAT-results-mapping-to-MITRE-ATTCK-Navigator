stages:
  - lint
  - test

# LINT PYTHON – PEP 8 (flake8) on everything in api/
python_lint:
  stage: lint
  image: python:3.13-slim
  # Cache flake8 for this job + branch
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - .venv/lib/
  before_script:
    - python -m pip install --upgrade pip
    - python -m venv .venv
    - source .venv/bin/activate
    - pip install flake8
  script:
    # fail fast on real errors but still print the full report
    - flake8 api tests --count --statistics
  artifacts:
    when: always
    name: "flake8-report-${CI_JOB_ID}.txt"
    paths:
      - flake8-report.txt
  allow_failure: false

# LINT REACT – ESLint on everything in client/
js_lint:
  stage: lint
  image: node:22

  # Save time and resources for whoever runs the gitlab ci
  cache:
    key:
      files:
        - client/package-lock.json
    paths:
      - client/.npm/
  before_script:
    - cd client
    - npm ci --cache .npm --prefer-offline
    - cd ..
  script:
    - cd client
    - npx eslint . --ext .js,.jsx

  allow_failure: false

# LINT REACT – ESLint on everything in tests/e2e/
cypress_js_lint:
  stage: lint
  image: node:22

  # Save time and resources for whoever runs the gitlab ci
  cache:
    key:
      files:
        - tests/e2e/package-lock.json
    paths:
      - tests/e2e/.npm/
  before_script:
    - cd tests/e2e
    - npm ci --cache .npm --prefer-offline
  script:
    - npx eslint . --ext .js,.jsx --ignore-pattern 'cypress_cache/*'
  allow_failure: false

# PYTHON TESTS – pytest against the api/ package
python_tests:
  stage: test
  image: python:3.13-slim
  # Cache server dependencies based on requirements.txt and this job's name
  cache:
    key:
      files:
        - api/requirements.txt
      prefix: "$CI_JOB_NAME"
    paths:
      - .venv/lib/
  before_script:
    - python -m pip install --upgrade pip
    - python -m venv .venv
    - source .venv/bin/activate
    - pip install -r api/requirements.txt
    - pip install pytest
  script:
    - python -m pytest -q

# CYPRESS E2E TESTS - start the Flask server with compiled frontend and run Cypress tests
cypress_e2e:
  stage: test
  image: cypress/browsers:22.15.0
  # to cache Cypress binary we use environment variables
  # to point at the folders we can list as paths in "cache" job settings
  variables:
    CYPRESS_CACHE_FOLDER: "$CI_PROJECT_DIR/tests/e2e/cypress_cache/"
  # Cache a lot based on the package-lock.json or requirements.txt files
  cache:
    - key:
        files:
          - tests/e2e/package-lock.json
      paths:
        - tests/e2e/.npm/
        - tests/e2e/cypress_cache
    - key:
        files:
          - client/package-lock.json
      paths:
        - client/.npm/
    - key:
        files:
          - api/requirements.txt
        prefix: "$CI_JOB_NAME"
      paths:
        - .venv/
  before_script:
    # Install Python
    - apt-get update
    - apt-get install -y python3 python3-pip python3-venv
    # Install frontend dependencies and build static files
    - cd client
    - npm ci --cache .npm --prefer-offline
    - npm run build
    - cd ..
    # Install server requirements and start it in detached mode
    - python3 -m venv .venv
    - source .venv/bin/activate
    - cd api
    - pip3 install -r requirements.txt
    - python3 -m flask run &
    - cd ..
    # Install Cypress dependencies
    - cd tests/e2e
    - npm ci --cache .npm --prefer-offline
  script:
    # Run Cypress tests on all browsers
    - npm run test:all
  artifacts:
    when: always
    paths:
      - tests/e2e/screenshots
      - tests/e2e/videos
    expire_in: 1 week
